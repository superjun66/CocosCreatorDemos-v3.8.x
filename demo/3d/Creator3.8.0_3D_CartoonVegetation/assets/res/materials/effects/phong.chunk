


struct LightInfo {
  vec3 lightDir;
  vec3 radiance;
  vec3 lightColor;
  float attenuation;
};

// directional light
LightInfo computeDirectionalLighting(
  vec3 lightDirection,
  vec3 lightColor
) {
  LightInfo ret;
  ret.lightDir = -normalize(lightDirection);
  ret.radiance = lightColor;
  ret.lightColor = lightColor;
  ret.attenuation = 1.;
  return ret;
}

// point light
LightInfo computePointLighting(
  vec3 worldPosition,
  vec3 lightPosition,
  float radius,
  float range,
  vec3 lightColor
) {
  vec3 lightDir = lightPosition - worldPosition;
  
//   #if USE_FAKE_POINT_LIGHT
//     float attenuation = 1.;
//   #else
    float attenuation = max(0., 1.0 - length(lightDir) / range);
//   #endif

  LightInfo ret;
  ret.lightDir = normalize(lightDir);
  ret.radiance = lightColor.rgb * attenuation;
  ret.lightColor = lightColor;
  ret.attenuation = attenuation;

  return ret;
}

// spot light
LightInfo computeSpotLighting(
  vec3 worldPosition,
  vec4 lightPositionAndRange,
  vec4 lightDirection,
  vec3 lightColor
) {
  vec3 lightDir = lightPositionAndRange.xyz - worldPosition;
  float attenuation = max(0., 1.0 - length(lightDir) / lightPositionAndRange.w);
  lightDir = normalize(lightDir);
  float cosConeAngle = max(0., dot(lightDirection.xyz, -lightDir));
  cosConeAngle = cosConeAngle < lightDirection.w ? 0. : cosConeAngle;
  cosConeAngle = pow(cosConeAngle, lightColor.w);
  
  LightInfo ret;
  ret.lightDir = lightDir;
  ret.radiance = lightColor.rgb * attenuation * cosConeAngle;
  ret.lightColor = lightColor;
  ret.attenuation = attenuation;

  return ret;
}


struct PhongSurface {
  vec3 diffuse;
  vec3 emissive;
  vec3 specular;
  float opacity;

  float glossiness;

  vec3 position;
  vec3 normal;
  vec3 viewDirection;
};

struct Lighting {
  vec3 diffuse;
  vec3 specular;
};

Lighting brdf (PhongSurface s, LightInfo info) {
  float glossiness = s.glossiness;

  Lighting result;
  float ndh = 0.0;
  // Get the half direction in world space
  vec3 halfDir = normalize(s.viewDirection + info.lightDir);
  float NdotH = max(0.0, dot(s.normal, halfDir));
  NdotH = pow(NdotH, max(1.0, glossiness));

  result.diffuse = info.radiance * max(0.001, dot(s.normal, info.lightDir));

  float specularNormalization = ( glossiness + 2.0 ) / 8.0;
  vec3 schlick = s.specular + vec3( 1.0 - s.specular ) * pow( max( 1.0 - dot( info.lightDir, halfDir ), 0.0 ), 5.0 );
  result.specular = info.radiance * NdotH * specularNormalization * schlick;

  return result;
}

vec4 composePhongShading (Lighting lighting, PhongSurface s) {
  vec4 o = vec4(0.0, 0.0, 0.0, 1.0);

  //diffuse is always calculated
  o.rgb = lighting.diffuse * s.diffuse;
  
  o.rgb += s.emissive;
  o.rgb += lighting.specular * s.specular;

  o.a = s.opacity;

  return o;
}

vec4 CCPhongShading (in PhongSurface s) {
  Lighting result;
  result.diffuse = vec3(0.);
  result.specular = vec3(0.);

  LightInfo info = computeDirectionalLighting(cc_mainLitDir.xyz, cc_mainLitColor.rgb * cc_mainLitColor.w);
  Lighting res = brdf(s, info);

  result.diffuse += res.diffuse;
  result.specular += res.specular;

  // #if CC_FORWARD_ADD
  // for (int i = 0; i < LIGHTS_PER_PASS; i++) {
  //   info = computePointLighting(s.position, cc_lightPos[i].xyz, cc_lightSizeRangeAngle[i].x, cc_lightSizeRangeAngle[i].y, cc_lightColor[i].rgb/* * cc_sphereLitColor[i].w*/);
  //   res = brdf(s, info);

  //   result.diffuse += res.diffuse;
  //   result.specular += res.specular;
  // }
  // #endif

  vec4 color = composePhongShading(result, s);
  
  // #if USE_ENVMAP
  //   vec3 reflectVec = reflect(-s.viewDirection, s.normal);
  //   vec4 envColor = texCube( envMap, vec3( -1. * reflectVec.x, reflectVec.yz ) );

  //   float specularStrength = 1.;
  //   color.rgb = mix( color.rgb, envColor.xyz, specularStrength * reflectivity );
  //   // color.rgb += envColor.xyz * specularStrength * reflectivity;
  // #endif

  return color;
}
