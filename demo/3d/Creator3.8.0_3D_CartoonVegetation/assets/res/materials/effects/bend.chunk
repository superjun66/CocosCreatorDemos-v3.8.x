uniform sampler2D grass_bend_map;

uniform Grass_Bend {
    vec4 grass_bend_uv;
	float bendPushStrength;
	float bendFlattenStrength;
	float bendPerspectiveCorrection;
};


struct BendSettings
{
	int mode;
	float mask;
	float pushStrength;
	float flattenStrength;
	float perspectiveCorrection;
};

//Bend map UV
vec2 getBendMapUV(in vec3 wPos) {
    vec2 uv = (wPos.xz - grass_bend_uv.xy) / grass_bend_uv.z + 0.5;
	return uv;			
}

vec4 getBendVector(vec3 wPos) {
	if (grass_bend_uv.w == 0.) {
        return vec4(0.5, wPos.y, 0.5, 0.0);
    }

	vec2 uv = getBendMapUV(wPos);

	vec4 v = texture(grass_bend_map, uv);

	//Remap from 0.1 to -1.1
	v.x = v.x * 2.0 - 1.0;
	v.z = v.z * 2.0 - 1.0;

	return v;
}


vec4 getBendOffset(vec3 wPos, BendSettings b) {
	vec4 vec = getBendVector(wPos);

	vec4 offset = vec4(wPos, vec.a);

	float grassHeight = wPos.y;
	float bendHeight = vec.y;
	float dist = grassHeight - bendHeight;

	float weight = clamp(dist, 0., 1.);

	offset.xz = vec.xz * b.mask * weight * b.pushStrength;
	offset.y = b.mask * (vec.a * 0.75) * weight * b.flattenStrength;

	float influence = 1.;

	//Pass the mask, so it can be used to lerp between wind and bend offset vectors
	offset.a = vec.a * weight * influence;

	//Apply mask
	offset.xyz *= offset.a;

	return offset;
}
