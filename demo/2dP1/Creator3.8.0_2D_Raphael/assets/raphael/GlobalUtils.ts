
export default class GlobalUtils {
    public static paths = [
    // 'M100,100 L100,200 L200,200 L200,100, Z'
    /*burger*/ 'M41.659,13.625 C41.659,13.625 49.284,1.125 24.159,0.75 C-1.213,0.371 -0.257,14.208 3.659,16.375 C7.575,18.542 23.301,14.212 32.076,15.167 C44.325,16.5 45.909,23.416 45.909,23.416 C45.909,23.416 38.825,19.833 33.492,19.916 C28.159,19.999 28.992,22.083 28.992,22.083 C28.992,22.083 25.992,19.166 19.242,18.833 C9.071,18.331 6.242,23.917 6.242,23.917 C6.242,23.917 8.076,20.417 4.576,20.5 C1.076,20.583 -5.013,27.034 10.159,26.5 C26.742,25.916 16.288,23.024 31.742,25 C49.992,27.333 45.492,31.166 33.492,29.166 C21.492,27.166 11.909,29.5 5.034,31.375 C1.171,32.429 2.925,35.485 6.909,38.166 C11.492,41.25 10.91,30.25 21.576,31.333 C32.242,32.416 43.784,30.25 43.409,36.875 C43.07,42.865 15.784,43.125 9.784,41.875 C4.305,40.733 3.701,41.333 4.784,44.75 C5.867,48.167 9.034,50.125 22.409,50.25 C43.241,50.444 42.034,44.25 42.034,44.25',
    /*deer*/ 'M18.714,66.786 C18.714,66.786 11.651,57.213 11.998,56.229 C13.972,50.662 46.249,53.912 41.306,35.831 C38.287,24.794 6.729,32.898 3.222,41.406 C0.778,47.34 6.813,47.891 3.622,52.719 C0.433,57.548 0.262,66.699 0.262,66.699 C0.262,66.699 10.366,41.994 26.676,46.464 C41.679,50.577 40.616,66.441 40.616,66.441 C40.616,66.441 38.725,51.704 47.599,42.383 C59.413,29.974 44.064,10.049 64.241,28.846 C68.062,32.406 47.428,32.381 38.01,18.9 C32.169,10.54 34.243,0.654 34.243,0.654 C33.027,9.187 36.735,18.758 41.793,17.896 C51.64,16.217 41.821,7.806 41.821,7.806 C40.874,12.377 45.574,21.179 51.22,18.499 C56.307,16.084 51.983,10.738 51.983,10.738',
    /*bike*/ 'M30.695,60.841 C30.695,60.841 22.536,74.203 8.537,67.203 C-1.234,62.317 -2.748,46.789 9.105,39.593 C25.013,29.934 37.398,56.183 31.035,55.387 C24.672,54.591 15.81,54.705 18.195,50.159 C20.58,45.615 26.263,35.274 32.853,33.457 C39.443,31.639 56.733,31.306 54.895,34.593 C52.737,38.456 36.715,59.477 37.17,54.931 C37.624,50.387 48.305,29.822 42.056,27.207 C35.806,24.593 23.875,25.389 21.83,20.162 C19.784,14.935 28.207,3.159 39.669,4.709 C52.281,6.413 51.146,10.959 54.668,14.254 C58.19,17.55 66.144,11.3 61.826,5.504 C57.508,-0.289 49.894,-2.45 50.236,6.527 C50.578,15.504 47.396,28.003 52.281,28.684 C57.167,29.366 66.824,31.183 68.302,27.547 C69.779,23.911 60.803,21.07 60.12,32.775 C59.438,44.478 67.507,33.002 76.597,44.023 C85.687,55.044 78.626,66.354 69.779,69.134 C61.826,71.634 54.195,66.827 50.804,60.044 C46.031,50.499 55.12,29.706 64.894,54.249',
    /*cheetah*/ 'M49.01,15.386 C49.01,15.386 43.431,22.058 50.73,22.516 C58.757,23.02 69.059,27.995 69.059,27.995 C69.059,27.995 69.008,25.642 65.824,23.627 C62.596,21.586 55.367,18.757 56.605,15.73 C58.382,11.385 63.492,9.521 60.432,4.103 C58.011,-0.188 49.408,-2.654 38.46,8.425 C27.213,19.81 3.152,10.749 0.974,14.018 C-1.647,17.95 11.351,20.663 25.091,17.513 C37.924,14.57 42.14,12.45 55.392,8.909 C68.178,5.493 80.005,4.035 82.565,2.278 C85.971,-0.062 87.783,1.623 91.541,6.079 C93.4,8.284 92.225,10.8 87.902,10.283 C80.249,9.37 82.671,11.602 75.949,16.932 C73.51,18.866 70.326,17.454 63.29,22.629 C50.648,31.929 45.122,40.609 45.122,40.609 C45.122,40.609 49.375,31.759 55.958,24.435 C61.998,17.715 62.826,14.138 65.34,12.224 C68.736,9.635 70.245,10.12 70.245,10.12',
    /*clown*/ 'M12.112,16.609 C12.112,16.609 13.032,11.453 11.086,10.155 C8.666,8.542 0.305,3.922 0.672,15.068 C1.039,26.214 7.786,20.863 11.012,19.909 C13.469,19.182 17.026,20.202 16.805,14.628 C16.585,9.055 14.4,1.925 22.965,2.822 C32.058,3.774 29.819,8.984 30.005,14.409 C30.317,23.538 28.245,24.233 24.725,24.822 C21.654,25.334 18.198,24.602 16.585,23.722 C14.972,22.841 15.192,19.76 21.718,21.668 C28.244,23.574 38.371,26.561 43.791,26.874 C51.381,27.313 65.938,23.281 65.791,17.341 C65.645,11.402 59.235,7.032 57.101,10.302 C54.755,13.895 58.951,15.955 59.816,13.822 C60.989,10.926 55.041,10.744 54.865,15.215 C54.719,18.955 56.332,21.741 54.719,22.328 C53.202,22.88 51.567,22.402 50.686,17.342 C49.806,12.282 52.17,8.566 53.693,7.955 C56.077,7.002 46.214,-0.845 40.273,0.255 C34.333,1.356 35.432,5.976 37.487,7.882 C39.54,9.788 45.92,12.063 47.02,14.555 C48.12,17.049 47.166,18.955 46.213,19.615 C44.46,20.829 39.146,24.556 37.339,19.983 C34.992,14.043 37.852,12.356 37.852,12.356',
    /*elephant*/ 'M69.895,37.218 C69.895,37.218 68.323,35.927 67.063,37.687 C65.787,39.468 67.751,41.51 69.895,41.55 C78.859,41.719 78.259,26.266 72.708,14.787 C67.769,4.572 60.362,-2.338 47.917,3.505 C33.782,10.144 36.926,24.528 49.603,21.84 C70.583,17.388 49.454,37.293 49.454,37.293 C49.454,37.293 69.108,33.091 53.655,28.44 C48.45,26.873 41.373,45.618 41.373,45.618 C41.373,45.618 42.358,23.715 27.182,26.984 C1.676,32.479 20.844,44.574 20.844,44.574 C20.844,44.574 21.688,32.197 14.937,32.76 C6.551,33.458 4.295,45.618 4.295,45.618 C4.295,45.618 -6.003,28.688 9.705,11.269 C17.422,2.709 35.569,-3.407 49.904,2.709 C64.163,8.793 46.668,20.637 62.57,23.453 C72.933,25.289 83.736,14.936 83.736,14.936',
    /*fox*/ 'M79.008,31.634 C82.567,29.467 81.328,27.3 74.207,25.288 C69.074,23.837 67.391,25.133 61.119,19.405 C54.851,13.678 61.043,11.588 66.383,10.349 C71.723,9.11 74.045,7.331 75.438,5.164 C76.831,2.996 79.575,0.676 79.575,0.676 C79.575,0.676 78.362,3.381 81.444,7.379 C84.571,11.433 89.499,12.981 89.499,12.981 C87.125,16.619 79.112,10.582 70.306,21.985 C63.671,30.578 59.625,38.909 59.625,38.909 C59.625,38.909 62.617,23.843 53.382,25.596 C42.195,27.721 29.236,38.909 29.236,38.909 C29.236,38.909 38.136,31.169 37.362,24.435 C36.588,17.703 29.409,16.751 16.638,18.957 C3.868,21.163 0.054,31.909 0.054,31.909 C0.054,31.909 14.423,32.791 26.372,26.06 C38.245,19.372 42.431,12.632 48.12,17.933 C55.56,24.868 44.753,32.792 44.753,32.792 L49.9,37.978',
    /*pizza_1_*/ 'M24.932,11.115 C24.932,11.115 21.341,14.271 20.296,17.9 C19.63,20.213 18.936,24.905 24.575,23.74 C30.213,22.572 23.276,10.511 14.332,25.873 C5.387,41.236 14.943,44.184 20.943,39.81 C27.166,35.273 22.589,28.755 15.757,31.643 C13.233,32.709 9.65,35.69 6.941,40.555 C3.515,46.713 -1.253,55.882 2.082,56.403 C5.192,56.891 10.249,53.764 13.942,51.64 C17.832,49.404 18.999,53.875 20.165,52.71 C21.333,51.541 19.972,48.624 22.305,47.652 C24.638,46.68 25.461,49.218 25.221,51.931 C24.92,55.35 29.209,56.306 28.722,48.722 C28.237,41.154 30.666,46.487 33.194,44.153 C35.722,41.818 36.433,38.383 41.684,35.565 C47.721,32.322 51.963,22.591 46.252,20.878 C41.872,19.565 38.338,20.47 35.564,23.407 C31.681,27.516 35.285,33.113 42.009,31.729 C47.557,30.586 65.452,26.471 65.18,13.725 C65.071,8.612 58.218,8.396 56.476,14.161 C54.621,20.307 60.95,21.301 62.569,15.466 C64.365,8.998 60.175,5.133 51.256,3.175 C43.653,1.507 30.407,-2.583 27.36,2.734 C24.895,7.036 27.36,9.344 29.111,9.54 C30.861,9.733 33.194,8.764 33.194,8.764 C33.194,8.764 33.389,10.511 37.084,12.069 C40.779,13.624 43.632,10.903 43.632,10.903 C43.632,10.903 43.825,14.273 47.909,16.216 C51.991,18.16 53.214,18.188 53.214,18.188',
    /*kangaroo*/ 'M27.987,49.986 C27.987,49.986 32.741,44.007 30.448,39.298 C25.68,29.503 29.37,39.819 46.387,25.42 C54.876,18.235 53.976,4.754 39.256,8.816 C28.355,11.826 24.399,22.852 18.765,29.681 C12.37,37.431 0.54,29.363 0.54,29.363 C0.54,29.363 7.318,36.275 13.42,36.109 C24.69,35.802 30.233,18.872 38.413,22.616 C47.46,26.756 56.666,25.613 63.336,18.254 C70.006,10.894 71.111,14.566 72.299,14.988 C73.487,15.41 75.557,15.41 73.756,12.266 C71.954,9.123 68.428,8.855 67.278,4.14 C66.128,-0.576 69.999,-0.039 69.501,4.6 C69.002,9.238 67.47,10.541 64.134,11.959 C60.8,13.378 53.67,14.137 54.704,19.012 C56.161,25.874 56.161,35.841 51.293,31.931',
    /*rhino*/ 'M49.55,40.92 C49.55,40.92 54.25,29.392 37.329,28.952 C-5.098,27.849 15.131,41.232 15.131,41.232 C15.131,41.232 14.737,28.715 8.676,26.276 C2.614,23.836 3.323,41.232 3.323,41.232 C0.568,32.729 -7.289,1.389 22.371,3.763 C43.026,5.416 39.46,42.332 39.46,42.332 C39.46,42.332 46.11,32.014 50.793,22.347 C56.381,10.812 68.803,2.679 65.191,1.243 C58.658,-1.355 57.871,15.335 71.488,21.474 C76.555,23.757 85.579,12.578 85.579,12.578 C85.579,12.578 84.004,19.585 78.494,24.937 C72.984,30.289 76.763,34.776 66.687,33.044 C53.29,30.741 57.398,21.158 57.398,21.158',
    /*rooster*/ 'M10.992,34.418 C10.992,34.418 8.432,43.303 5.947,38.258 C3.462,33.214 8.206,27.039 5.947,28.394 C3.688,29.749 -0.001,34.946 1.881,29.373 C3.764,23.8 5.796,20.863 3.613,22.369 C1.428,23.875 -0.604,24.1 2.784,19.734 C6.173,15.367 11.745,16.344 13.853,21.315 C15.962,26.286 21.307,27.49 25.6,25.156 C29.893,22.821 19.275,22.218 17.016,27.189 C14.757,32.159 15.208,34.418 17.694,36.224 C20.178,38.032 22.361,36.451 22.361,36.451 C22.361,36.451 23.266,39.539 24.019,40.593 C24.772,41.648 26.429,40.593 27.106,33.967 C27.784,27.34 28.989,22.39 31.474,16.959 C33.958,11.526 35.916,9.419 38.477,7.535 C41.037,5.653 42.463,6.38 44.123,7.535 C47.425,9.832 48.993,13.083 48.993,13.083 C48.993,13.083 44.514,12.161 42.416,12.078 C40.497,12.003 38.521,9.852 38.05,6.456 C37.345,1.386 39.237,1.728 40.644,2.826 C41.405,3.419 43.258,-0.155 45.24,0.719 C47.111,1.544 45.594,4.161 46.955,4.327 C49.954,4.691 49.396,6.758 47.739,7.661 C46.705,8.225 43.673,9.042 44.275,13.107 C44.877,17.174 47.341,21.372 46.615,27.857 C45.671,36.262 37.298,42.902 32.579,45.763 C28.751,48.083 29.015,49.679 29.893,53.543 C30.42,55.864 27.437,57.891 26.705,57.008 C25.249,55.25 27.546,54.087 31.098,55.653 C33.027,56.504 33.555,57.245 36.744,57.218',
    /*soccer*/ 'M22.274,83.165 C22.274,83.165 14.661,84.078 12.276,74.726 C10.276,66.888 0.199,69.607 0.038,75.926 C-0.086,80.788 4.477,83.604 8.556,82.045 C13.218,80.263 38.699,63.596 42.589,39.013 C49.629,-5.458 74.663,0.58 74.663,0.58 C74.663,0.58 49.188,15.296 37.111,15.697 C26.807,16.038 26.034,1.98 30.912,0.781 C38.89,-1.183 40.19,14.696 30.752,17.257 C21.314,19.817 16.514,45.412 16.514,45.412 C16.514,45.412 26.353,22.935 26.353,34.054 C26.353,41.504 12.318,58.344 15.754,61.288 C19.954,64.888 29.632,51.011 29.632,51.011',
    /*swim*/ 'M19.459,27.82 C26.339,28.699 30.617,26.9 30.617,26.9 C30.617,26.9 31.457,27.859 38.536,27.5 C45.615,27.14 43.814,23.54 43.814,23.54 C43.814,23.54 48.254,27.019 53.053,25.701 C57.852,24.381 55.299,21.988 65.05,16.222 C74.248,10.783 84.488,19.822 72.849,23.661 C61.211,27.5 54.892,23.582 66.89,13.264 C78.887,2.946 88.975,8.066 103.122,9.343 C111.541,10.103 113.521,19.522 103.443,15.983 C94.738,12.926 98.323,10.143 83.646,2.905 C77.292,-0.229 74.717,-1.945 65.29,5.784 C55.293,13.981 38.896,21.9 38.896,21.9 C38.896,21.9 35.256,20.22 33.457,20.22 C31.658,20.22 28.098,22.259 25.938,22.619 C23.779,22.978 23.446,22.378 20.74,22.378 C18.479,22.378 15.533,24.024 12.58,24.299 C5.702,24.94 0.264,23.499 0.264,23.499',
    /*bull*/ 'M87.357,0.052 C87.357,0.052 87.599,5.627 82.926,6.033 C70.187,7.141 58.445,21.541 72.404,23.535 C81.785,24.876 80.434,23.038 83.924,24.532 C87.413,26.027 90.629,21.753 88.909,20.213 C80.379,12.569 73.779,3.061 61.549,13.899 C44.045,29.408 19.543,18.432 12.044,25.945 C4.545,33.458 5.287,47.779 15.961,50.021 C34.606,53.936 33.487,63.538 33.487,63.538 C33.487,63.538 24.445,58.411 24.586,44.121 C24.719,30.716 15.2,20.352 7.391,37.466 C-0.418,54.579 0.092,65.224 0.092,65.224 C0.092,65.224 12.135,43.596 34.487,43.29 C66.997,42.847 58.854,65.775 58.854,65.775 C58.854,65.775 76.892,17.121 57.455,24.532 C40.424,31.026 57.064,40.511 72.278,44.108 C79.968,45.926 70.74,54.875 70.74,54.875',
    ];

    //R.smooth ->>>>>>>>>>
    getFirstControlPoints(rhs) {
        var n = rhs.length,
            x = [],     // Solution vector.
            tmp = [],   // Temp workspace.
            b = 2.0,
            i;

        x[0] = rhs[0] / b;

        for (i = 1; i < n; i++) { // Decomposition and forward substitution.
            tmp[i] = 1 / b;
            b = (i < n - 1 ? 4.0 : 2.0) - tmp[i];
            x[i] = (rhs[i] - x[i - 1]) / b;
        }

        for (i = 1; i < n; i++) {
            x[n - i - 1] -= tmp[n - i] * x[n - i]; // Backsubstitution.
        }
        return x;
    }

    getCubicBezierCurvePoints(points, firstControlPoints, secondControlPoints) {
        var size = points.length,
            closed = points[size - 1].x === points[0].x && points[size - 1].y === points[0].y,
            n = size,
            // Add overlapping ends for averaging handles in closed paths
            overlap = 0;

        if (closed) {
            size = n = size - 1;
        }

        if (size <= 2)
            return;
        if (closed) {
            // Overlap up to 4 points since averaging beziers affect the 4
            // neighboring points
            overlap = Math.min(size, 4);
            n += Math.min(size, overlap) * 2;
        }

        var knots = [];
        for (var i = 0; i < size; i++)
            knots[i + overlap] = points[i];
        if (closed) {
            // If we're averaging, add the 4 last points again at the
            // beginning, and the 4 first ones at the end.
            for (var i = 0; i < overlap; i++) {
                knots[i] = points[i + size - overlap];
                knots[i + size + overlap] = points[i];
            }
        } else {
            n--;
        }
        // Calculate first Bezier control points
        // Right hand side vector
        var rhs = [];

        // Set right hand side X values
        for (var i = 1; i < n - 1; i++)
            rhs[i] = 4 * knots[i].x + 2 * knots[i + 1].x;
        rhs[0] = knots[0].x + 2 * knots[1].x;
        rhs[n - 1] = 3 * knots[n - 1].x;
        // Get first control points X-values
        var x = this.getFirstControlPoints(rhs);

        // Set right hand side Y values
        for (var i = 1; i < n - 1; i++)
            rhs[i] = 4 * knots[i].y + 2 * knots[i + 1].y;
        rhs[0] = knots[0].y + 2 * knots[1].y;
        rhs[n - 1] = 3 * knots[n - 1].y;
        // Get first control points Y-values
        var y = this.getFirstControlPoints(rhs);

        if (closed) {
            // Do the actual averaging simply by linearly fading between the
            // overlapping values.
            for (var i = 0, j = size; i < overlap; i++, j++) {
                var f1 = i / overlap,
                    f2 = 1 - f1,
                    ie = i + overlap,
                    je = j + overlap;
                // Beginning
                x[j] = x[i] * f1 + x[j] * f2;
                y[j] = y[i] * f1 + y[j] * f2;
                // End
                x[je] = x[ie] * f2 + x[je] * f1;
                y[je] = y[ie] * f2 + y[je] * f1;
            }
            n--;
        }

        // Now set the calculated handles
        for (var i = overlap; i <= n - overlap; i++) {

            firstControlPoints[i - overlap] = {
                x: x[i],
                y: y[i]
            };

            if (i < n - 1) {
                secondControlPoints[i - overlap] = {
                    x: 2 * knots[i + 1].x - x[i + 1],
                    y: 2 * knots[i + 1].y - y[i + 1]
                };
            }
            else {
                secondControlPoints[i - overlap] = {
                    x: (knots[n].x + x[n - 1]) / 2,
                    y: (knots[n].y + y[n - 1]) / 2
                };
            }
        }
    }

    getCubicBezierCurvePath(knots) {
        var firstControlPoints = [],
            secondControlPoints = [];

        this.getCubicBezierCurvePoints(knots, firstControlPoints, secondControlPoints);

        return [firstControlPoints, secondControlPoints];
    }
    // R.smooth ->>>>>>>>>>

}